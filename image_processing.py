# -*- coding: utf-8 -*-
"""image processing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PA5SxwFDE1WLy-6g6erzpGE7T_vlPmSq
"""

import requests

r = requests.get("https://raw.githubusercontent.com/tesseract-ocr/tessdata/4.00/ind.trainedata", stream = True)

with open("/usr/share/tesseract-ocr/4.00/tessdata/ind.trainedata", "wb") as file:
  for block in r.iter_content(chunk_size = 1024):
    if block:
      file.write(block)

! apt install tesseract-ocr libtesseract-dev libmagickwand-dev
from IPython.display import HTML, clear_output
clear_output()

! pip install pytesseract wnad opencv-python
clear_output()

from PIL import Image
import pytesseract
import cv2
import numpy as np
from pytesseract import Output
import re

# Readin image from url
image = Image.open(requests.get('https://thegeekpage.com/wp-content/uploads/2022/07/5_default_changed-min.png', stream=True).raw)
image = image.resize((400,250))
image.save('sample.png')
image

#exteacting text from image
custom_confiq = r'-l eng --oem 3 --psm 6'
text = pytesseract.image_to_string(image,config=custom_confiq)
print(text)

try:
  text=pytesseract.image_to_string(image,lang="eng")
  characters_to_remove = "!@#$%^&*()_+-/*<>?{[]}~"
  new_string = text
  for character in characters_to_remove:
    new_string = new_string.replace(character, "")
    print(new_string)
except IOError as e:
  print("Error (%s)." % e)

def get_grayscale(image):
  return cv2.cvtcolor(image, cv2.COLOR_BGR2GRAY)
  gray = get_graysccale(image)
  Image.fromarray(gray)

#noise removal
def remove_noise(image):
  return cv2.medianBlur(image,5)
  noise = remove_noise(gray)
  Image.fromarray(gray)

#thresholding
def thresholding(image):
  return cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU[1])
  thresh = threshholding(gray)
  Image.fromarray(thresh)

#erosion
def erode(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.erode(image,kernel,iterations = 1)
erode = erode(gray)
Image.fromarray(erode)

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # find the chess board (calibration pattern) corners
    ret, corners = cv2.findChessboardCorners(gray, (7, 6), None)

    # if calibration pattern is found, add object points,
    # image points (after refining them)
    if ret == True:
        objpoints.append(objp)

        # Refine the corners of the detected corners
        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners2)

        # Draw and display the corners
        img = cv2.drawChessboardCorners(img, (7, 6), corners2, ret)

ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

image = cv2.imread('sample.png')

from pytesseract import pytesseract

import image 
import pytesseract as pya

pya.tesseract_cmd = r'https://www.southernliving.com/thmb/eSP7GwGqi5wpNok7I49fpx3gB64=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/Maya-Angelou-Quote-fc2bb390ef424a30a81bfde213e12fab.png'
print(pya.image_to_string(image.open('doggieville.png')))

import image 
import pytesseract as pya

import pytesseract as pya

pip install pytesseract

from PIL import Image
import pytesseract
import cv2
import numpy as np
from pytesseract import Output
import re

$ pip install pillow

pip install pillow